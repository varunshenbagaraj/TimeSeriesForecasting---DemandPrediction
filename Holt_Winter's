# Step 0 - Importing Libraries
---------------------------------------------------------------------------------------------------------------------------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error

from statsmodels.tsa.holtwinters import ExponentialSmoothing

import warnings
warnings.filterwarnings('ignore')

# Step 1 - Impoorting dataset
---------------------------------------------------------------------------------------------------------------------------------------------
df  = pd.read_csv('/content/IDF_train 2.csv', index_col=['date'], parse_dates=['date'])

# Step 2 - Data Exploration
---------------------------------------------------------------------------------------------------------------------------------------------
df.head()

# total number of items in the dataset
df.item.nunique()

# total number of stores in the dataset
df.store.nunique()

# total number of unique dates
df.index.value_counts()

# Step 3 - Data Structuring - Dictionaries to store the forecast values and performance metrics
---------------------------------------------------------------------------------------------------------------------------------------------
test_forecast_dict = dict()
future_forecast_dict = dict()
test_em_dict = dict()

# Step 4 - Model Building & Forecasting
---------------------------------------------------------------------------------------------------------------------------------------------
# list of items in the dataset
item_list = list(df['item'].unique())

for i in item_list:

  # Filtering the dataset by items
  a = df[df['item']==i]

  # Data Wrangling
  a = a.groupby(['item','date']).agg({'sales':'sum'}).reset_index()
  a = a.set_index('date', drop=True)
  a = a.groupby(['item']).sales.resample('MS').sum().reset_index().set_index('date', drop=True)
  #a = a.groupby(['item']).sales.rolling(3).sum().dropna().reset_index()
  #a = a.set_index('date', drop=True)
  a = a.drop('item', axis=1)
  #print(a)
      
  #Splitting the data into training and testing sets
  train = a.loc[:'2016-12-31']
  test = a.loc['2017-01-01':]
  #print(len(train))
  #print(len(test))
  #print(train)
  #print(test)
    
  # Statistics
  mean = round(a['sales'].mean(),4)
  stddev = round(a['sales'].std(),4)

  # Holt Winters Model
  # Predicting the test dataset values
  hwdf_model_test = ExponentialSmoothing(train, trend='add', seasonal='add', seasonal_periods=12).fit()
  hwdf_test_pred = hwdf_model_test.forecast(12).apply(np.ceil)
  key_t = 'Item_'+str(i)
  value_t = hwdf_test_pred
  test_forecast_dict.update({key_t:value_t})
  
  #print('Item {}'.format(i),'\n')
  #print(hwdf_test_pred,'\n')
  #print('Mean -', round(mean,4))
  #print('Std -', round(stddev,4))

  # Evaluation Metrics
  r2 = round(r2_score(test, hwdf_test_pred),4)
  mse = round(mean_squared_error(test, hwdf_test_pred),4)
  rmse = round(np.sqrt(mse),4)
  mae = round(mean_absolute_error(test, hwdf_test_pred),4)
  mape = round(mean_absolute_percentage_error(test, hwdf_test_pred),4)

  # creating a dictionary for test_forecast evaluation metrics

  key_em = 'Item_'+str(i)
  value_em = {'r2':r2, 'MSE':mse, 'RMSE':rmse, 'MAE':mae, 'MAPE':mape}
  test_em_dict.update({key_em:value_em})

  #print('r2_score - ', r2)
  #print('MSE -', mse)
  #print('RMSE -', rmse)
  #print('MAE -', mae)
  #print('MAPE - ', mape)
  #print() #for space after each result

  # Forecasting Future Demand
  hwdf_model_future = ExponentialSmoothing(a, trend='add', seasonal='add', seasonal_periods=12).fit()

  # Forecasting for the next 12 months
  hwdf_model_future_pred = hwdf_model_future.forecast(12).apply(np.ceil) # Rounding up because demand is expressed better as a whole number
  #print(hwdf_model_future_pred,'\n')
  
  # creating a dictionary for forecasting the future demand

  key_f = 'Item_'+str(i)
  value_f = hwdf_model_future_pred
  future_forecast_dict.update({key_f:value_f})

  # Data Visualization
  plt.figure(figsize=(6,3))
  plt.title('Item_'+str(i))
  plt.plot(a, label='Actual')
  plt.plot(hwdf_model_future_pred, label='Future')
  plt.plot(hwdf_test_pred, label='Test')
  plt.xlabel('Date')
  plt.ylabel('Sales #')
  plt.legend(loc='best')
  plt.show()

# Test data forecasting
test_forecast_dict = pd.DataFrame(test_forecast_dict)
test_forecast_dict

# dataframe for performance evaluation metrics
test_em_dict = pd.DataFrame(test_em_dict)
test_em_dict

future_forecast_dict = pd.DataFrame(future_forecast_dict)
future_forecast_dict
