# Import Libraries
------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

from statsmodels.tsa.stattools import adfuller, kpss

from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error

from statsmodels.tsa.arima_model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.model_selection import cross_val_score

from xgboost import XGBRegressor as XGB
from sklearn.tree import DecisionTreeRegressor
from statsmodels.tsa.holtwinters import ExponentialSmoothing

import datetime
import itertools
import warnings
warnings.filterwarnings('ignore')

plt.style.use('ggplot')

# Data Import
-------------
master_data = pd.read_csv('/content/IDF_train 2.csv', parse_dates=['date'], index_col=['date']).drop(['store'], axis=1)

# Data Wrangling
md = master_data.copy()

md = md.groupby(['item','date']).agg({'sales':'sum'}).reset_index()
md = md.set_index('date', drop=True)

md = md.groupby(['item']).sales.rolling(90).sum().shift(-90).dropna().reset_index().set_index('date', drop=True)
md.head()

# Data Visualization
--------------------
for i in list(md['item'].unique()):
  plotdf = md[md['item']==i]
  plotdf = plotdf.drop(['item'], axis=1)
  #print('Item_'+str(i))
  #print(plotdf,'\n')

  plt.figure(figsize=(6,3))
  plt.plot(plotdf, label='Actual Sales')
  plt.title('Item {}'.format(i), size=15)
  plt.xlabel('Date', size=12)
  plt.ylabel('Sales #', size=12)
  plt.xticks(rotation=45, size=10)
  plt.yticks(rotation=45, size=10)
  plt.legend(loc='best')
  plt.show()
  
 # Probablity Distribution
 --------------------------
dist = master_data.copy()
dist = dist.groupby(['item','date']).agg({'sales':'sum'}).reset_index()
year_list = list(dist['date'].dt.year.unique())

for i in list(dist['item'].unique()):
  plt.figure(figsize=(6,4))
  df = dist[dist['item']==i].set_index('date', drop=True).drop('item', axis=1)
  sns.distplot(df,label='Item_'+str(i))
  plt.legend(loc='best')
  
# Feature engineering
 -----------------------
md = md.reset_index()
md['day_of_month'] = md['date'].dt.day
md['month'] = md['date'].dt.month
md['year'] = md['date'].dt.year
md['wk_of_year'] = md['date'].dt.weekofyear
md['quarter'] = md['date'].dt.quarter
md['is_month_start'] = md['date'].dt.is_month_start.astype(int)
md['is_month_end'] = md['date'].dt.is_month_end.astype(int)
md['is_quarter_start'] = md['date'].dt.is_quarter_start.astype(int)
md['is_quarter_end'] = md['date'].dt.is_quarter_end.astype(int)
